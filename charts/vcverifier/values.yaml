# Default values for vcverifier.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## -- option to override the name config in the _helpers.tpl for the whole chart
nameOverride: ""
## -- option to override the fullname config in the _helpers.tpl for the whole chart
fullnameOverride: ""

# -- if a specific service account should be used, it can be configured here
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- specifies if the account should be created
  create: false

## deployment specific configuration
deployment:
  # -- initial number of target replications, can be different if autoscaling is enabled
  replicaCount: 1
  # -- number of old replicas to be retained
  revisionHistoryLimit: 3
  ## configuration of the update strategy
  updateStrategy:
    # -- type of the update
    type: RollingUpdate
    # -- new pods will be added gradually
    rollingUpdate:
      # -- number of pods that can be created above the desired amount while updating
      maxSurge: 1
      # -- number of pods that can be unavailable while updating
      maxUnavailable: 0
  ## configuration of the image to be used
  image:
    # -- image name
    repository: quay.io/fiware/vcverifier
    # -- tag of the image to be used
    tag: 0.0.1
    # -- specification of the image pull policy
    pullPolicy: IfNotPresent
  # -- port to run the container at
  port: 3000
  # -- logLevel of the application
  logLevel: DEBUG
  # -- url of the resource to request 
  protectedResource:
  ## -- address of an ebsi compliant(https://api-pilot.ebsi.eu/docs/apis/trusted-issuers-registry/latest#/) trusted issuers registry for validating the incoming VCs
  ## -- if not set, the issuer will not be verified
  tirAddress: 
  # -- urls of vcwalt to connect to
  walt:
    # -- address of the core api
    coreUrl: https://core.walt
    # -- address of the signatory api
    signatoryUrl: https://signatory.walt
    # -- address of the auditor api
    auditorUrl: https://auditor.walt
    # -- address of the custodian api
    custodianUrl: https://custodian.walt
    # -- address of the essif api
    essifUrl: https://essif.walt

  # -- additional labels for the deployment, if required
  additionalLabels: {}
  # -- additional annotations for the deployment, if required
  additionalAnnotations: {}
  ## Activation Service resource requests and limits, we leave the default empty to make that a concious choice by the user.
  ## for the autoscaling to make sense, you should configure this.
  # resources:
    # limits:
      # cpu: 100m
      # memory: 128Mi
    # requests:
      # cpu: 100m
      # memory: 128Mi
  # -- selector template
  # ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}
  # -- tolerations template
  # ref: ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  # -- affinity template
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

## configuration for the k8s service to access the vcwaltid
service:
  # -- service type
  type: ClusterIP
  # -- additional annotations, if required
  annotations: {}
  # -- port to be set for the internal service
  port: 3000

route:
  ## -- should the deployment create openshift routes
  enabled: false
  # -- annotations to be added to the route
  annotations: {}
  # -- host to be used
  # host: localhost
  # -- tls configuration for the route
  tls: 
    termination: edge
  # -- configuration for certificate generation.
  # -- see: https://github.com/FIWARE-Ops/fiware-gitops/blob/master/doc/ROUTES.md
  certificate: { }
  #   issuer:
  #     kind: ClusterIssuer
  #     name: letsencrypt-aws-prod

## ingress configuration
ingress:
  # -- should there be an ingress to connect the activation service with the public internet
  enabled: false
  # -- annotations to be added to the ingress
  annotations: {}
    # kubernetes.io/ingress.class: "ambassador"
    ## example annotations, allowing cert-manager to automatically create tls-certs and forcing everything to use ssl.
    # kubernetes.io/tls-acme: "true"
    # ingress.kubernetes.io/ssl-redirect: "true"
  # -- all hosts to be provided
  hosts: []
    ## provide a hosts and the paths that should be available
    # - host: localhost
      # paths:
      # - /
  # -- configure the ingress' tls
  tls: []
    # - secretName: bae-as-tls
      # hosts:
        # - vcverifier.fiware.org

# -- configuration for the databse
db:
  # -- should a filebased db used? 
  fileBased: true
  # -- pvc to be used for the sqlite
  pvc: 
    size: 1Gi
  # -- config for the individual components
  store:
    # -- database driver to be used
    driver: sqlite3
    connectionString: file:/db/issuer.sqlite?mode=rwc&cache=shared&_fk=1
  verifier:
    # -- database driver to be used
    driver: sqlite3
    connectionString: file:/db/verifier.sqlite?mode=rwc&cache=shared&_fk=1
  verifiableregistry:
    # -- database driver to be used
    driver: sqlite3
    connectionString: file:/db/verifiableregistry.sqlite?mode=rwc&cache=shared&_fk=1