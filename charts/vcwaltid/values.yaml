# Default values for activation-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## -- option to override the name config in the _helpers.tpl for the whole chart
nameOverride: ""
## -- option to override the fullname config in the _helpers.tpl for the whole chart
fullnameOverride: ""

# -- if a specific service account should be used, it can be configured here
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- specifies if the account should be created
  create: false

## deployment specific configuration
deployment:
  # -- initial number of target replications, can be different if autoscaling is enabled
  replicaCount: 1
  # -- number of old replicas to be retained
  revisionHistoryLimit: 3
  ## configuration of the update strategy
  updateStrategy:
    # -- type of the update
    type: RollingUpdate
    # -- new pods will be added gradually
    rollingUpdate:
      # -- number of pods that can be created above the desired amount while updating
      maxSurge: 1
      # -- number of pods that can be unavailable while updating
      maxUnavailable: 0
  ## configuration of the image to be used
  image:
    # -- image name
    # ref: https://hub.docker.com/r/i4trust/activation-service
    repository: wistefan/vcwaltid
    # -- tag of the image to be used
    tag: 0.0.1
    # -- specification of the image pull policy
    pullPolicy: IfNotPresent
  # -- additional labels for the deployment, if required
  additionalLabels: {}
  # -- additional annotations for the deployment, if required
  additionalAnnotations: {}
  ## Activation Service resource requests and limits, we leave the default empty to make that a concious choice by the user.
  ## for the autoscaling to make sense, you should configure this.
  # resources:
    # limits:
      # cpu: 100m
      # memory: 128Mi
    # requests:
      # cpu: 100m
      # memory: 128Mi
  # -- selector template
  # ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}
  # -- tolerations template
  # ref: ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  # -- affinity template
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

## configuration for the k8s service to access the vcwaltid
service:
  # -- service type
  type: ClusterIP
  # -- additional annotations, if required
  annotations: {}


# -- configuration specific to the apis to run. Be aware: ports are configurable in the chart, but not in the app yet. So dont change the defaults.
api:
  # -- config for the core api
  core:
    enabled: true
    port: 7000
    ## openshift specific route definition. Will not work on plain k8s
    route:
      ## -- should the deployment create openshift routes
      enabled: false
      # -- annotations to be added to the route
      annotations: {}
      # -- host to be used
      # host: localhost
      # -- tls configuration for the route
      tls: 
        termination: edge
      # -- configuration for certificate generation.
      # -- see: https://github.com/FIWARE-Ops/fiware-gitops/blob/master/doc/ROUTES.md
      certificate: { }
      #   issuer:
      #     kind: ClusterIssuer
      #     name: letsencrypt-aws-prod
    ## ingress configuration
    ingress:
      # -- should there be an ingress to connect the activation service with the public internet
      enabled: false
      # -- annotations to be added to the ingress
      annotations: {}
        # kubernetes.io/ingress.class: "ambassador"
        ## example annotations, allowing cert-manager to automatically create tls-certs and forcing everything to use ssl.
        # kubernetes.io/tls-acme: "true"
        # ingress.kubernetes.io/ssl-redirect: "true"
      # -- all hosts to be provided
      hosts: []
        ## provide a hosts and the paths that should be available
        # - host: localhost
          # paths:
          # - /
      # -- configure the ingress' tls
      tls: []
        # - secretName: bae-as-tls
          # hosts:
            # - vcbackend.fiware.org
  # -- config for the auditor api
  auditor:
    enabled: true
    port: 7002
    ## openshift specific route definition. Will not work on plain k8s
    route:
      ## -- should the deployment create openshift routes
      enabled: false
      # -- annotations to be added to the route
      annotations: {}
      # -- host to be used
      # host: localhost
      # -- tls configuration for the route
      tls: 
        termination: edge
      # -- configuration for certificate generation.
      # -- see: https://github.com/FIWARE-Ops/fiware-gitops/blob/master/doc/ROUTES.md
      certificate: { }
      #   issuer:
      #     kind: ClusterIssuer
      #     name: letsencrypt-aws-prod
    ## ingress configuration
    ingress:
      # -- should there be an ingress to connect the activation service with the public internet
      enabled: false
      # -- annotations to be added to the ingress
      annotations: {}
        # kubernetes.io/ingress.class: "ambassador"
        ## example annotations, allowing cert-manager to automatically create tls-certs and forcing everything to use ssl.
        # kubernetes.io/tls-acme: "true"
        # ingress.kubernetes.io/ssl-redirect: "true"
      # -- all hosts to be provided
      hosts: []
        ## provide a hosts and the paths that should be available
        # - host: localhost
          # paths:
          # - /
      # -- configure the ingress' tls
      tls: []
        # - secretName: bae-as-tls
          # hosts:
            # - vcbackend.fiware.org
   # -- config for the signatory api
  signatory:
    enabled: true
    port: 7001
    ## openshift specific route definition. Will not work on plain k8s
    route:
      ## -- should the deployment create openshift routes
      enabled: false
      # -- annotations to be added to the route
      annotations: {}
      # -- host to be used
      # host: localhost
      # -- tls configuration for the route
      tls: 
        termination: edge
      # -- configuration for certificate generation.
      # -- see: https://github.com/FIWARE-Ops/fiware-gitops/blob/master/doc/ROUTES.md
      certificate: { }
      #   issuer:
      #     kind: ClusterIssuer
      #     name: letsencrypt-aws-prod
    ## ingress configuration
    ingress:
      # -- should there be an ingress to connect the activation service with the public internet
      enabled: false
      # -- annotations to be added to the ingress
      annotations: {}
        # kubernetes.io/ingress.class: "ambassador"
        ## example annotations, allowing cert-manager to automatically create tls-certs and forcing everything to use ssl.
        # kubernetes.io/tls-acme: "true"
        # ingress.kubernetes.io/ssl-redirect: "true"
      # -- all hosts to be provided
      hosts: []
        ## provide a hosts and the paths that should be available
        # - host: localhost
          # paths:
          # - /
      # -- configure the ingress' tls
      tls: []
        # - secretName: bae-as-tls
          # hosts:
            # - vcbackend.fiware.org
   # -- config for the custodian api
  custodian:
    enabled: true
    port: 7003
    ## openshift specific route definition. Will not work on plain k8s
    route:
      ## -- should the deployment create openshift routes
      enabled: false
      # -- annotations to be added to the route
      annotations: {}
      # -- host to be used
      # host: localhost
      # -- tls configuration for the route
      tls: 
        termination: edge
      # -- configuration for certificate generation.
      # -- see: https://github.com/FIWARE-Ops/fiware-gitops/blob/master/doc/ROUTES.md
      certificate: { }
      #   issuer:
      #     kind: ClusterIssuer
      #     name: letsencrypt-aws-prod
    ## ingress configuration
    ingress:
      # -- should there be an ingress to connect the activation service with the public internet
      enabled: false
      # -- annotations to be added to the ingress
      annotations: {}
        # kubernetes.io/ingress.class: "ambassador"
        ## example annotations, allowing cert-manager to automatically create tls-certs and forcing everything to use ssl.
        # kubernetes.io/tls-acme: "true"
        # ingress.kubernetes.io/ssl-redirect: "true"
      # -- all hosts to be provided
      hosts: []
        ## provide a hosts and the paths that should be available
        # - host: localhost
          # paths:
          # - /
      # -- configure the ingress' tls
      tls: []
        # - secretName: bae-as-tls
          # hosts:
            # - vcbackend.fiware.org
   # -- config for the essif api
  essif:
    enabled: true
    port: 7010
    ## openshift specific route definition. Will not work on plain k8s
    route:
      ## -- should the deployment create openshift routes
      enabled: false
      # -- annotations to be added to the route
      annotations: {}
      # -- host to be used
      # host: localhost
      # -- tls configuration for the route
      tls: 
        termination: edge
      # -- configuration for certificate generation.
      # -- see: https://github.com/FIWARE-Ops/fiware-gitops/blob/master/doc/ROUTES.md
      certificate: { }
      #   issuer:
      #     kind: ClusterIssuer
      #     name: letsencrypt-aws-prod
    ## ingress configuration
    ingress:
      # -- should there be an ingress to connect the activation service with the public internet
      enabled: false
      # -- annotations to be added to the ingress
      annotations: {}
        # kubernetes.io/ingress.class: "ambassador"
        ## example annotations, allowing cert-manager to automatically create tls-certs and forcing everything to use ssl.
        # kubernetes.io/tls-acme: "true"
        # ingress.kubernetes.io/ssl-redirect: "true"
      # -- all hosts to be provided
      hosts: []
        ## provide a hosts and the paths that should be available
        # - host: localhost
          # paths:
          # - /
      # -- configure the ingress' tls
      tls: []
        # - secretName: bae-as-tls
          # hosts:
            # - vcbackend.fiware.org

# -- config to be used by walt
config:
  # -- database configuaration, see hikari docu for options
  datasource:
    jdbcUrl: jdbc:sqlite:data/walt.db
    maximumPoolSize: 5
    autoCommit: false
    dataSource:
        journalMode: WAL
        fullColumnNames: false
  # -- all additional config to be used by waltid 
  additionalConfig:

  # -- service configurations
  serviceConf:
    signatory.conf: |
      proofConfig {
        issuerDid="To-be-decided"
        issuerVerificationMethod="todo"
        proofType="LD_PROOF"
        domain="TEST"
        nonce="todo"
      }
      templatesFolder: "/templates"


  # -- service matrix config, see waltID documentation for more details
  # -- in order to change the config of a service, set the config path to the mounted file
  serviceMatrix:
    id.walt.services.ecosystems.essif.didebsi.DidEbsiService=id.walt.services.ecosystems.essif.didebsi.WaltIdDidEbsiService

    id.walt.services.ecosystems.essif.jsonrpc.JsonRpcService=id.walt.services.ecosystems.essif.jsonrpc.WaltIdJsonRpcService

    id.walt.services.vc.JsonLdCredentialService=id.walt.services.vc.WaltIdJsonLdCredentialService

    id.walt.services.vc.JwtCredentialService=id.walt.services.vc.WaltIdJwtCredentialService

    id.walt.services.crypto.CryptoService=id.walt.services.crypto.SunCryptoService

    id.walt.services.keystore.KeyStoreService=id.walt.services.keystore.SqlKeyStoreService

    id.walt.services.key.KeyService=id.walt.services.key.WaltIdKeyService

    id.walt.services.jwt.JwtService=id.walt.services.jwt.WaltIdJwtService

    id.walt.services.vcstore.VcStoreService=id.walt.services.vcstore.FileSystemVcStoreService

    id.walt.services.hkvstore.HKVStoreService=id.walt.services.hkvstore.FileSystemHKVStore:config/fsStore.conf

    id.walt.services.context.ContextManager=id.walt.services.context.WaltIdContextManager

    id.walt.signatory.Signatory=/config/signatory.conf

    id.walt.custodian.Custodian=id.walt.custodian.WaltIdCustodian

    id.walt.auditor.Auditor=id.walt.auditor.WaltIdAuditor

    id.walt.services.ecosystems.gaiax.GaiaxService=id.walt.services.ecosystems.gaiax.WaltIdGaiaxService


# -- VC templates to be used by waltId
templates:
  PacketDeliveryService.json: |
    {
      "@context": [
        "https://www.w3.org/2018/credentials/v1",
        "https://w3id.org/security/suites/jws-2020/v1"
      ],
      "credentialSchema": {
        "id": "https://raw.githubusercontent.com/hesusruiz/dsbamvf/main/schemas/PacketDeliveryService/2022-10/schema.json",
        "type": "FullJsonSchemaValidator2021"
      },
      "credentialSubject": {
        "familyName": "Customer",
        "firstName": "Happy",
        "id": "did:key:z6Mkfdio1n9SKoZUtKdr9GTCZsRPbwHN8f7rbJghJRGdCt88",
        "roles": [
          {
            "names": [
              "GOLD_CUSTOMER"
            ],
            "target": "EU.EORI.NLPACKETDEL"
          }
        ]
      },
      "id": "urn:uuid:b84ceee3-7cc6-4a1c-b0c2-4fbffe8346d2",
      "issuanceDate": "2022-12-13T14:09:43Z",
      "issued": "2022-12-13T14:09:43Z",
      "issuer": "did:key:z6MkufEFkFSCXg1DHUsZbYuWcGf4QHat34YSoVgs67ED9m4S",
      "proof": {
        "created": "2022-12-13T14:09:44Z",
        "creator": "did:key:z6MkufEFkFSCXg1DHUsZbYuWcGf4QHat34YSoVgs67ED9m4S",
        "jws": "eyJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCJdLCJhbGciOiJFZERTQSJ9..vMs2iaQddhKDhu4tQMdHxqvMu9ksdxiYr2Q-dXXSRoDEmZyyfw5VsoPXJmVRBauovpFXatL9Je7zjSu9zSo7AA",
        "type": "JsonWebSignature2020",
        "verificationMethod": "did:key:z6MkufEFkFSCXg1DHUsZbYuWcGf4QHat34YSoVgs67ED9m4S#z6MkufEFkFSCXg1DHUsZbYuWcGf4QHat34YSoVgs67ED9m4S"
      },
      "type": [
        "VerifiableCredential",
        "PacketDeliveryService"
      ],
      "validFrom": "2022-12-13T14:09:43Z"
    }